自旋锁适用情况:
    1.自旋锁比较适用于锁使用者保持锁时间比较短的情况
        正是由于自旋锁使用都一般保持锁的时间非常短,自旋锁的效率远高于互斥锁

    2.信号量和读写信号量适合于保持时间比较长的情况,它们会导致调用都睡眠 ,因此只能在进程上下文使用,而自旋锁适合于保持时间非常短的情况,它可以在任何上下文使用,如果被保护的共享资源只在进程上下文访问,使用信号量保护该共享资源非常合适,如果对共享资源的访问时间非常短,自旋锁也可以
    3.自旋锁保持期间是抢占失效的,而信号量和读写信号量保持期间可以被抢占
        1.单CPU非抢占内核下:自旋锁会在编译时被忽略(因为单CPU且非抢占模式情况下,不可能发生进程切换,时钟只有一个进程处于临界区,自旋锁实际上没什么用)
        2.单CPU抢占内核下:自旋锁仅仅当作一个设置抢占的开关(因为单CPU不可能有并发访问临界区的情况 ,禁止抢占就可以保证临界区的唯一被拥有)
        3.多CPU下,此时才能完全发挥自旋锁的作用,自旋锁在内核中主要用来防止多处理器中并发访问临界区,防止内核抢占造成竞争
    4.操作是原子的,因此当多个线程在给定时间自旋,也只有一个线程可以获得该锁

自旋锁的特性:
    1.被自旋锁保护的临界区代码执行时不能进入休眠
    2.被自旋锁保护的临界区代码执行时不能被其他中断中断
    3.被自旋锁保护的临界区代码执行时,内核不能被抢占
    4.自旋锁忙等期间,因为并没有进入到临界区,所以内核抢占还是有效的,因此,等待自旋锁释放的进程有可能被更高优化级所取代
    5.存在两个问题:死锁和过多占用cpu资源
